
cmake_minimum_required(VERSION 3.16)
project({{name}})

set(CMAKE_CXX_STANDARD 14)

{{#use_conan}}
if(EXISTS ${CMAKE_BINARY_DIR}/conanbuildinfo.cmake)
    include(${CMAKE_BINARY_DIR}/conanbuildinfo.cmake)
    conan_basic_setup()
else()
    message(WARNING "The file conanbuildinfo.cmake doesn't exist, you have to run conan install first")
endif()
{{/use_conan}}
set(SRC_FILES 
{{#src_files}}
    {{{.}}}
{{/src_files}}
)

{{#project_is_exe}}
add_executable(${PROJECT_NAME} ${SRC_FILES})
{{/project_is_exe}}
{{#project_is_static_lib}}
add_library(${PROJECT_NAME} STATIC ${SRC_FILES})
{{/project_is_static_lib}}
{{#project_is_dynamic_lib}}
add_library(${PROJECT_NAME} SHARED ${SRC_FILES})
{{/project_is_dynamic_lib}}

target_include_directories(${PROJECT_NAME} PUBLIC {{include_dir}})
{{#use_conan}}
target_link_libraries(${PROJECT_NAME} ${CONAN_LIBS})
{{/use_conan}}

{{#include_test}}
{{#testing_framework_catch}}
set(TEST_APP_NAME ${PROJECT_NAME}_test)

set(TEST_SRC
{{#test_files}}
    {{{.}}}
{{/test_files}} 
)
list(REMOVE_ITEM SRC_FILES src/main.cpp)
add_executable(${TEST_APP_NAME} ${TEST_SRC} ${SRC_FILES} {{test_dir}}/{{test_src_dir}}/test_main.cpp)
target_include_directories(${TEST_APP_NAME} PUBLIC {{test_dir}}/{{test_include_dir}})
target_include_directories(${TEST_APP_NAME} PUBLIC {{include_dir}})
{{#use_conan}}
target_link_libraries(${TEST_APP_NAME} ${CONAN_LIBS})
{{/use_conan}}

enable_testing()

add_test(
  NAME ${TEST_APP_NAME}
  COMMAND ${TEST_APP_NAME} -o report.xml -r junit)

{{/testing_framework_catch}}
{{/include_test}}
